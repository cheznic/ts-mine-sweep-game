!function(e){var t={};function i(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,i),o.l=!0,o.exports}i.m=e,i.c=t,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)i.d(n,o,function(t){return e[t]}.bind(null,o));return n},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=2)}([function(e,t,i){var n;void 0===(n=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e,t){this.x=-1,this.y=-1,this.row=-1,this.col=-1,this.hasBomb=!1,this.isClicked=!1,this.isFlagged=!1,this.adjacentBombs=-1,this.x=e,this.y=t}return e.prototype.getImage=function(t){return t&&this.hasBomb?e.images.bomb.image:this.isClicked&&0==this.adjacentBombs?e.images.zero.image:this.isClicked&&this.adjacentBombs>0?e.images.number.image:this.isFlagged?e.images.flag.image:e.images.tile.image},e.initImage=function(e,t,i){var n=new Image(e,t);return n.src=i,n},e.WIDTH=22,e.HEIGHT=22,e.images={tile:{image:e.initImage(e.WIDTH,e.HEIGHT,"./img/tile.png")},flag:{image:e.initImage(e.WIDTH,e.HEIGHT,"./img/flag.png")},number:{image:e.initImage(e.WIDTH,e.HEIGHT,"./img/number.png")},bomb:{image:e.initImage(e.WIDTH,e.HEIGHT,"./img/bomb.png")},zero:{image:e.initImage(e.WIDTH,e.HEIGHT,"./img/zero.png")}},e}();t.Tile=i}.apply(t,[i,t]))||(e.exports=n)},function(e,t,i){var n,o;n=[i,t,i(0)],void 0===(o=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(){}return e.ROWS=30,e.COLS=30,e.BOMB_COUNT=110,e.HEIGHT=e.ROWS*i.Tile.HEIGHT,e.WIDTH=e.COLS*i.Tile.WIDTH,e.BG_COLOR="#335577",e}();t.Config=n}.apply(t,n))||(e.exports=o)},function(e,t,i){var n,o;n=[i,t,i(3)],void 0===(o=function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),window.addEventListener("load",function(){(new i.Game).start()})}.apply(t,n))||(e.exports=o)},function(e,t,i){var n,o;n=[i,t,i(4),i(0),i(5),i(6),i(7),i(1)],void 0===(o=function(e,t,i,n,o,r,a,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var l=function(){return function(){var e=this;this.stage=new a.Stage("minefield"),this.mineField=new o.MineField,this.timer=i.Timer.getInstance("timerDiv"),this.scoreBoard=r.ScoreBoard.getInstance("scoreBoardDiv"),this.over=!0,this.score=0,this.show=function(){if(null!=e.stage.context){e.stage.context.clearRect(0,0,s.Config.WIDTH,s.Config.HEIGHT);for(var t=0;t<s.Config.COLS;t++){for(var i=0;i<s.Config.ROWS;i++){var o=e.mineField.getTile(t,i),r=o.getImage(e.over);if(e.stage.context.drawImage(r,t*n.Tile.WIDTH,i*n.Tile.HEIGHT,n.Tile.WIDTH,n.Tile.HEIGHT),o.adjacentBombs>0&&o.isClicked){switch(o.adjacentBombs){case 1:e.stage.context.fillStyle="#229954";break;case 2:e.stage.context.fillStyle="#8E44AD";break;case 3:e.stage.context.fillStyle="#2980B9";break;case 4:e.stage.context.fillStyle="#E74C3C";break;case 5:e.stage.context.fillStyle="#D35400";break;case 6:e.stage.context.fillStyle="#2BAEAA";break;case 7:e.stage.context.fillStyle="#C0392B";break;case 8:e.stage.context.fillStyle="#2E86C1"}e.stage.context.font="bold 13px Arial",e.stage.context.textAlign="center",e.stage.context.fillText(o.adjacentBombs.toString(),o.x+n.Tile.WIDTH/2,o.y+(n.Tile.WIDTH/2+5))}}e.score>=s.Config.COLS*s.Config.ROWS-s.Config.BOMB_COUNT&&e.win()}}else console.log("Error: canvas context is null, exiting")},this.win=function(){null!=e.stage.context?(e.stage.context.font="100px Righteous",e.stage.context.fillStyle=e.getRandomColor(),e.stage.context.textAlign="center",e.stage.context.shadowColor="#7f7f7f",e.stage.context.shadowOffsetX=1,e.stage.context.shadowOffsetY=1,e.stage.context.shadowBlur=3,e.stage.context.fillText("You Win!",n.Tile.WIDTH*s.Config.COLS/2,n.Tile.WIDTH*s.Config.ROWS/2+22)):console.log("Error: canvas context is null, exiting")},this.getRandomColor=function(){return"hsla("+Math.floor(360*Math.random())+", 100%, 75%, 1)"},this.handleTileClick=function(t){if(!e.over){var i=t,n=e.mineField.getTile(i.detail.tile.x,i.detail.tile.y);n.isFlagged||n.isClicked||(n.isClicked=!0,n.hasBomb?e.end():(e.score++,e.scoreBoard.score=e.score,e.score>=s.Config.COLS*s.Config.ROWS-s.Config.BOMB_COUNT&&e.end()),0==n.adjacentBombs&&e.clearOpenTiles(n),e.show())}},this.clearOpenTiles=function(t){for(var i=-1;i<2;i++)for(var n=-1;n<2;n++){var o=t.col+i,r=t.row+n;if(o>=0&&o<s.Config.COLS&&r>=0&&r<s.Config.ROWS){if(0==i&&0==n)continue;var a=e.mineField.getTile(o,r);if(a.hasBomb)continue;if(a.isClicked)continue;a.isClicked=!0,e.score++,e.scoreBoard.score=e.score,0==a.adjacentBombs&&e.clearOpenTiles(a)}}},this.handleTileRightClick=function(t){var i=t,n=e.mineField.getTile(i.detail.tile.x,i.detail.tile.y);n.isFlagged=!n.isFlagged,e.show()},this.end=function(){e.over=!0,e.timer.stop()},this.start=function(){e.over=!1,e.score=0,e.scoreBoard.score=e.score,e.mineField.makeGrid(s.Config.ROWS,s.Config.COLS),e.mineField.scatterBombs(s.Config.BOMB_COUNT),e.show(),e.timer.start()},this.stage.bgColor=s.Config.BG_COLOR,this.stage.size(s.Config.WIDTH,s.Config.HEIGHT),this.scoreBoard.score=0;var t=document.getElementById("startButton");null!=t?(window.addEventListener("startButtonClickedEvent",this.start,!1),t.onclick=function(){dispatchEvent(new Event("startButtonClickedEvent"))},this.mineField.makeGrid(s.Config.ROWS,s.Config.COLS),this.mineField.scatterBombs(s.Config.BOMB_COUNT),window.addEventListener("tileClickedEvent",this.handleTileClick,!1),window.addEventListener("tileRightClickedEvent",this.handleTileRightClick,!1)):console.log("Error: start button didn't initialize")}}();t.Game=l}.apply(t,n))||(e.exports=o)},function(e,t,i){var n;void 0===(n=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e){this.time=0,this.intervalId=0,this.div=document.getElementById(e),this.div.innerHTML="00:00:00"}return e.getInstance=function(t){return e.INSTANCE||(e.INSTANCE=new e(t)),e.INSTANCE},e.prototype.start=function(){e.INSTANCE.stop(),e.INSTANCE.time=0,e.INSTANCE.div.innerHTML=n(e.INSTANCE.time),e.INSTANCE.intervalId=setInterval(function(){e.INSTANCE.time++,e.INSTANCE.div.innerHTML=n(e.INSTANCE.time)},1e3)},e.prototype.stop=function(){clearInterval(e.INSTANCE.intervalId)},e}();function n(e){var t=Math.floor(e),i=Math.floor(t/3600);t-=3600*i;var n=Math.floor(t/60);return t-=60*n,"Time: "+("00"+i).slice(-2)+":"+("00"+n).slice(-2)+":"+("00"+t).slice(-2)}t.Timer=i}.apply(t,[i,t]))||(e.exports=n)},function(e,t,i){var n,o;n=[i,t,i(0),i(1)],void 0===(o=function(e,t,i,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(){return function(){var e=this;this.makeGrid=function(t,n){for(var o=0;o<n;o++){e.tiles[o]=[];for(var r=0;r<t;r++)e.tiles[o][r]=new i.Tile(o,r),e.tiles[o][r].x=o*i.Tile.WIDTH,e.tiles[o][r].y=r*i.Tile.HEIGHT,e.tiles[o][r].row=r,e.tiles[o][r].col=o}},this.scatterBombs=function(t){var i=n.Config.COLS*n.Config.ROWS;e:for(var o=0;o<t;o++)for(var r=Math.floor(Math.random()*i),a=0,s=0;s<n.Config.COLS;s++)for(var l=0;l<n.Config.ROWS;l++){if(a==r){if(e.tiles[s][l].hasBomb){o--;continue e}e.tiles[s][l].hasBomb=!0}a++}for(s=0;s<n.Config.COLS;s++)for(l=0;l<n.Config.ROWS;l++)e.tiles[s][l].hasBomb||(e.tiles[s][l].adjacentBombs=e.countAdjacentBombs(e.tiles[s][l]))},this.countAdjacentBombs=function(t){for(var i=0,o=-1;o<2;o++)for(var r=-1;r<2;r++){var a=t.col+o,s=t.row+r;a>=0&&a<n.Config.COLS&&s>=0&&s<n.Config.ROWS&&e.tiles[a][s].hasBomb&&i++}return i},this.getTile=function(t,i){return e.tiles[t][i]},this.setTile=function(t,i,n){e.tiles[t][i]=n},this.tiles=[]}}();t.MineField=o}.apply(t,n))||(e.exports=o)},function(e,t,i){var n;void 0===(n=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e){this._score=0,this.div=document.getElementById(e),this.div.innerHTML="000"}return e.getInstance=function(t){return e.INSTANCE||(e.INSTANCE=new e(t)),e.INSTANCE},Object.defineProperty(e.prototype,"score",{get:function(){return this._score},set:function(e){this._score=e,this.div.innerHTML="Score: "+("000"+e).slice(-3)},enumerable:!0,configurable:!0}),e}();t.ScoreBoard=i}.apply(t,[i,t]))||(e.exports=n)},function(e,t,i){var n,o;n=[i,t,i(8),i(0)],void 0===(o=function(e,t,i,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e){var t=this;this.canvas=document.getElementById(e),this.canvas.focus(),this.context=this.canvas.getContext("2d"),null!=this.context?(this.canvas.addEventListener("click",function(e){t.handleClick(e)}),this.canvas.addEventListener("contextmenu",function(e){t.handleRightClick(e)})):console.log("Error: Canvas failed to initialize")}return e.prototype.size=function(e,t){this.canvas.setAttribute("width",e.toString()),this.canvas.setAttribute("height",t.toString())},Object.defineProperty(e.prototype,"bgColor",{set:function(e){this.canvas.style.backgroundColor=e},enumerable:!0,configurable:!0}),e.prototype.handleClick=function(e){e.preventDefault(),e.stopPropagation();var t=new i.Coordinate(e.offsetX||e.layerX,e.offsetY||e.layerY),o=new i.Coordinate(Math.floor(t.x/n.Tile.WIDTH),Math.floor(t.y/n.Tile.HEIGHT)),r=new CustomEvent("tileClickedEvent",{detail:{tile:{x:o.x,y:o.y}}});window.dispatchEvent(r)},e.prototype.handleRightClick=function(e){e.preventDefault(),e.stopPropagation();var t=new i.Coordinate(e.offsetX||e.layerX,e.offsetY||e.layerY),o=new i.Coordinate(Math.floor(t.x/n.Tile.WIDTH),Math.floor(t.y/n.Tile.HEIGHT)),r=new CustomEvent("tileRightClickedEvent",{detail:{tile:{x:o.x,y:o.y}}});window.dispatchEvent(r)},e}();t.Stage=o}.apply(t,n))||(e.exports=o)},function(e,t,i){var n;void 0===(n=function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i=function(){return function(e,t){this.x=e,this.y=t}}();t.Coordinate=i}.apply(t,[i,t]))||(e.exports=n)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,